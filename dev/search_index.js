var documenterSearchIndex = {"docs":
[{"location":"api/","page":"API","title":"API","text":"CurrentModule = TestTools","category":"page"},{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/#TestTools","page":"API","title":"TestTools","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"TestTools.install\nTestTools.uninstall","category":"page"},{"location":"api/#TestTools.install","page":"API","title":"TestTools.install","text":"TestTools.install(; <keyword arguments>)\n\nInstall all of the CLI utilities.\n\nKeyword arguments\n\njulia::AbstractString: path to julia executable. Default: path of the current running   julia\nbin_dir::AbstractString: directory to install CLI utilities into.   Default: ~/.julia/bin\njulia_flags::Vector{<:AbstractString}: command line flags for CLI executables.   Default: [\"--startup-file=no\", \"-q\", \"--compile=min\", \"-O0\"]\nforce::Bool: flag used to indicate that existing CLI executables should be   overwritten. Default: false\n\n\n\n\n\n","category":"function"},{"location":"api/#TestTools.uninstall","page":"API","title":"TestTools.uninstall","text":"TestTools.uninstall(; <keyword arguments>)\n\nUnnstall all of the CLI utilities.\n\nKeyword arguments\n\nbin_dir::AbstractString: directory containing CLI executables to uninstall.   Default: ~/.julia/bin\n\n\n\n\n\n","category":"function"},{"location":"api/#jltest","page":"API","title":"jltest","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [jltest]","category":"page"},{"location":"api/#TestTools.jltest","page":"API","title":"TestTools.jltest","text":"The jltest module provides support for running unit tests.\n\n\n\n\n\n","category":"module"},{"location":"api/#TestTools.jltest.TestSetPlus","page":"API","title":"TestTools.jltest.TestSetPlus","text":"struct TestSetPlus{T<:AbstractTestSet} <: AbstractTestSet\n\nExtension of the TestSet type that provides the following functionality:\n\ndisplay diffs when comparison tests fail and\nsupports \"fail fast\".\n\n\n\n\n\n","category":"type"},{"location":"api/#TestTools.jltest.find_tests-Tuple{AbstractString}","page":"API","title":"TestTools.jltest.find_tests","text":"find_tests(dir::AbstractString), <keyword arguments>)::Vector{String}\n\nRecursively search dir for Julia files tests.\n\nKeyword Arguments\n\nexclude_runtests::Bool: flag that determines whether to exclude files named runtests.jl from the list of test files. Default: true\n\n\n\n\n\n","category":"method"},{"location":"api/#TestTools.jltest.run_tests-Tuple{Vector{<:AbstractString}}","page":"API","title":"TestTools.jltest.run_tests","text":"run_tests(tests::Vector{<:AbstractString}; <keyword arguments>)\nrun_tests(tests::AbstractString; <keyword arguments>)\n\nRun tests contained in the list of files or modules provided in tests. If tests is an empty list or an empty string, an ArgumentError is thrown. File names in tests may be specified with or without the .jl extension.\n\nKeyword Arguments\n\nname::AbstractString: name to use for test set used to group tests.   Default: empty string\ntest_set_type::Type: type of test set to use to group tests. Default: TestSetPlus\n\n\n\n\n\n","category":"method"},{"location":"api/#jlcoverage","page":"API","title":"jlcoverage","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"jlcoverage\njlcoverage.display_coverage","category":"page"},{"location":"api/#TestTools.jlcoverage","page":"API","title":"TestTools.jlcoverage","text":"The jlcoverage module provides support for analyzing code coverage of unit tests.\n\n\n\n\n\n","category":"module"},{"location":"api/#TestTools.jlcoverage.display_coverage","page":"API","title":"TestTools.jlcoverage.display_coverage","text":"display_coverage(coverage_data::Vector; startpath::AbstractString)\n\nDisplay coverage results provided in coverage_data. File names are displayed relative to startpath. To display absolute paths, set startpath to an empty string. By default, startpath is set to the current working directory.\n\n\n\n\n\n","category":"function"},{"location":"api/#jlcodestyle","page":"API","title":"jlcodestyle","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [jlcodestyle]","category":"page"},{"location":"api/#TestTools.jlcodestyle","page":"API","title":"TestTools.jlcodestyle","text":"The jlcodestyle module provides support for checking and enforcing code style.\n\n\n\n\n\n","category":"module"},{"location":"acknowledgements/#Acknowledegments","page":"Acknowledgements","title":"Acknowledegments","text":"","category":"section"},{"location":"acknowledgements/","page":"Acknowledgements","title":"Acknowledgements","text":"TestTools leverages several excellent Julia packages to support its core capabilities.\nCoverage\nCoverageTools\nJuliaFormatter\nTestTools borrows ideas (and some code) from the following great Julia packages.\nTestSetExtensions\nThe TestSetPlus type and methods are based extensively on TestsetExtensions.ExtendedTestSet.\nThe run_tests() and autodetect_tests() methods are essentially a re-implementation and refactoring of the TestsetExtensions.@includetests macro as methods.\nSafeTestsets\nThe strategy for isolating tests came from the SafeTestsets.@safetestset macro.\njlpkg\nThe strategy for installing CLI executables came from jlpkg.install().\nTestTools was inspired by analogous code testing packages in the Python ecosystem:\npytest\ncoverage\npycodestyle","category":"page"},{"location":"installation/#Installation","page":"Installation","title":"Installation","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"Start Julia in the default (global) environment.\nnote: Note\nInstallation in the default environment makes the CLI tools available from within all projects.\nInstall the TestTools package.\npkg> add TestTools  # Press ']' to enter the Pkg REPL mode.\nInstall the CLI tools.\njulia> using TestTools; TestTools.install()\nBy default, the CLI executables are installed to ~/.julia/bin.\nTo install the CLI executables to a different location, set the bin_dir keyword argument to the path of the directory where the executables should be installed.\njulia> using TestTools; TestTools.install(; bin_dir=/PATH/TO/BIN/DIR)\nTo overwrite pre-existing CLI executables, set the force keyword argument to true.\njulia> using TestTools; TestTools.install(; force=true)\nFor other installation options, please refer to the documentation for the TestTools.install() method.","category":"page"},{"location":"installation/#Uninstallation","page":"Installation","title":"Uninstallation","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"CLI executables may be uninstalled by using the TestTools.uninstall() method.","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"julia> using TestTools; TestTools.uninstall()","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"By default, uninstall() removes CLI executables from ~/.julia/bin. To uninstall CLI executables installed to a different location, set the bin_dir keyword argument to the path of the directory containing the executables to uninstall.","category":"page"},{"location":"docs-index/#Index","page":"Index","title":"Index","text":"","category":"section"},{"location":"docs-index/","page":"Index","title":"Index","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = TestTools","category":"page"},{"location":"#TestTools.jl","page":"Home","title":"TestTools.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"TestTools is a collection of CLI tools and APIs that simplifies code testing, coverage analysis, and style checking.","category":"page"},{"location":"","page":"Home","title":"Home","text":"TestTools provides the following core components.","category":"page"},{"location":"","page":"Home","title":"Home","text":"CLI tools: jltest, jlcoverage, jlcodestyle\nAPI: functions to management of unit tests (e.g. automatic detection of tests).","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#CLI-Tools","page":"Home","title":"CLI Tools","text":"","category":"section"},{"location":"#jltest","page":"Home","title":"jltest","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Run unit tests in a single file.","category":"page"},{"location":"","page":"Home","title":"Home","text":"$ jltest test/tests.jl","category":"page"},{"location":"","page":"Home","title":"Home","text":"Run unit tests in a single file with fail-fast enabled (i.e., stop after first failing test).","category":"page"},{"location":"","page":"Home","title":"Home","text":"$ jltest -x test/tests.jl","category":"page"},{"location":"","page":"Home","title":"Home","text":"Run all unit tests contained in a directory.","category":"page"},{"location":"","page":"Home","title":"Home","text":"$ jltest test","category":"page"},{"location":"","page":"Home","title":"Home","text":"Display all command-line options.","category":"page"},{"location":"","page":"Home","title":"Home","text":"$ jltest --help","category":"page"},{"location":"#jlcoverage","page":"Home","title":"jlcoverage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Generate a coverage report (after running unit tests while collecting coverage data).","category":"page"},{"location":"","page":"Home","title":"Home","text":"$ julia -e 'import Pkg; Pkg.test(\"TestTools\"; coverage=true)'  # run unit tests\n\n$ jlcoverage  # generate coverage report\n-------------------------------------------------------------------------------\nFile                                  Lines of Code     Missed   Coverage\n-------------------------------------------------------------------------------\nsrc/TestTools.jl                                  0          0        N/A\nsrc/jlcodestyle/cli/cli.jl                       34          0     100.0%\n...\nsrc/pkg.jl                                       42          3      92.9%\n-------------------------------------------------------------------------------\nTOTAL                                           289          7      97.6%","category":"page"},{"location":"","page":"Home","title":"Home","text":"Display all command-line options.","category":"page"},{"location":"","page":"Home","title":"Home","text":"$ jlcoverage --help","category":"page"},{"location":"#jlcodestyle","page":"Home","title":"jlcodestyle","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Basic code style check (reformatting of source file disabled).","category":"page"},{"location":"","page":"Home","title":"Home","text":"$ jlcodestyle src/TestTools.jl\nNo style errors found.\n\n$ jlcodestyle examples/jlcodestyle/not-blue-style.jl\nStyle errors found. Files not modified.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Code style check with reformatting of source file enabled.","category":"page"},{"location":"","page":"Home","title":"Home","text":"$ jlcodestyle --overwrite examples/jlcodestyle/not-blue-style.jl\nStyle errors found. Files modified to correct errors.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Display all command-line options.","category":"page"},{"location":"","page":"Home","title":"Home","text":"$ jlcodestyle --help","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Integration-with-Pkg.test()","page":"Home","title":"Integration with Pkg.test()","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Add test/runtests.jl file containing the following lines.\nusing TestTools: jltest\njltest.run_test(@__DIR__)\nnote: Note\nPassing @__DIR__ as the first argument causes jltest.run_tests() to auto-detect all tests in the directory containing the runtests.jl file. To run tests that reside in a different directory, replace @__DIR__ with the path to the directory containing the tests. For more details, please refer to the documentation for the jltest.run_tests() method.","category":"page"}]
}
